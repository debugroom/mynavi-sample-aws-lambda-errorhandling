AWSTemplateFormatVersion: '2010-09-09'

Description: Lambda for chaning cognito user status function template with YAML - Depends On 1-s3-for-lambda-deploy-cfn.yml.

Resources:
  LambdaForSyncExecuteBusinessErrorFuntion:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue: debugroom-mynavi-sample-lambda-errorhandling-deploy-s3-bucket
        S3Key: spring-cloud-3-1-lambda-function-0.0.1-SNAPSHOT-aws.jar
      Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
      FunctionName: mynavi-sample-aws-lambda-errorhandling-sync-business-error
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: syncExecuteBusinessErrorFunction
      MemorySize: 1024
      Runtime: java11
      Timeout: 120
      Role: !GetAtt LambdaRole.Arn

  LambdaForSyncExecuteSystemErrorFuntion:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue: debugroom-mynavi-sample-lambda-errorhandling-deploy-s3-bucket
        S3Key: spring-cloud-3-1-lambda-function-0.0.1-SNAPSHOT-aws.jar
      Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
      FunctionName: mynavi-sample-aws-lambda-errorhandling-sync-system-error
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: syncExecuteSystemErrorFunction
      MemorySize: 1024
      Runtime: java11
      Timeout: 120
      Role: !GetAtt LambdaRole.Arn

  LambdaForAsyncExecuteBusinessErrorFuntion:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue: debugroom-mynavi-sample-lambda-errorhandling-deploy-s3-bucket
        S3Key: spring-cloud-3-1-lambda-function-0.0.1-SNAPSHOT-aws.jar
      Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
      FunctionName: mynavi-sample-aws-lambda-errorhandling-async-business-error
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: asyncExecuteBusinessErrorFunction
      MemorySize: 1024
      Runtime: java11
      Timeout: 120
      Role: !GetAtt LambdaRole.Arn

  LambdaForAsyncExecuteSystemErrorFuntion:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue: debugroom-mynavi-sample-lambda-errorhandling-deploy-s3-bucket
        S3Key: spring-cloud-3-1-lambda-function-0.0.1-SNAPSHOT-aws.jar
      Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
      FunctionName: mynavi-sample-aws-lambda-errorhandling-async-system-error
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: asyncExecuteSystemErrorFunction
      MemorySize: 1024
      Runtime: java11
      Timeout: 120
      DeadLetterConfig:
        TargetArn: !Ref SNSTopicForDeadLetterQueue
      Role: !GetAtt LambdaRole.Arn

  LambdaForNotifySystemErrorFuntion:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::ImportValue: debugroom-mynavi-sample-lambda-errorhandling-deploy-s3-bucket
        S3Key: spring-cloud-3-1-lambda-function-0.0.1-SNAPSHOT-aws.jar
      Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker::handleRequest
      FunctionName: mynavi-sample-aws-lambda-errorhandling-notify-system-error
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: notifySystemErrorFunction
      MemorySize: 1024
      Runtime: java11
      Timeout: 120
      Role: !GetAtt LambdaRole.Arn

  SNSTopicForDeadLetterQueue:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: mynavi-sample-lambda-errorhandling-async-system-error-sns-topic
      Subscription:
        - Endpoint: "{{resolve:ssm:mynavi-sample-lambda-errorhandling-sns-sms:1}}"
          Protocol: sms
        - Endpoint: "{{resolve:ssm:mynavi-sample-lambda-errorhandling-sns-email:1}}"
          Protocol: email

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  DeadLetterConfigSNSAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: mynavi-sample-lambda-errorhandling-sns-access-policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sns:Publish"
            Resource: !Ref SNSTopicForDeadLetterQueue
      Roles:
        - !Ref LambdaRole

  SQSAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: mynavi-sample-lambda-errorhandling-sqs-access-policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "sqs:*"
            Resource: "*"
      Roles:
        - !Ref LambdaRole

  CloudFormationAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: mynavi-sample-lambda-errorhandling-CloudFormationAccessPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "cloudformation:*"
            Resource: "*"
      Roles:
        - !Ref LambdaRole

  SSMAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: mynavi-microservice-cfn-cognito-lambda-SSMAccessPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "cloudwatch:PutMetricData"
              - "ds:CreateComputer"
              - "ds:DescribeDirectories"
              - "ec2:DescribeInstanceStatus"
              - "logs:*"
              - "ssm:*"
              - "ec2messages:*"
            Resource: "*"
          - Effect: Allow
            Action:
              - "iam:CreateServiceLinkedRole"
            Resource: "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*"
            Condition:
              StringLike:
                iam:AWSServiceName: "ssm.amazonaws.com"
          - Effect: Allow
            Action:
              - "iam:DeleteServiceLinkedRole"
              - "iam:GetServiceLinkedRoleDeletionStatus"
            Resource: "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*"
          - Effect: Allow
            Action:
              - "ssmmessages:CreateControlChannel"
              - "ssmmessages:CreateDataChannel"
              - "ssmmessages:OpenControlChannel"
              - "ssmmessages:OpenDataChannel"
            Resource: "*"
      Roles:
        - !Ref LambdaRole

Outputs:
  LambdaRole:
    Description: lambda role
    Value: !Ref LambdaRole
    Export:
      Name: mynavi-sample-lambda-errorhandling-lambda-role

  LambdaForSyncExecuteBusinessErrorFuntion:
    Description: Sync execute Lambda function for occuring business error function.
    Value: !Ref LambdaForSyncExecuteBusinessErrorFuntion
    Export:
      Name: mynavi-sample-lambda-errorhandling-sync-execute-business-error-function-name

  LambdaForSyncExecuteBusinessErrorFuntionArn:
    Description: Sync execute Lambda function for occuring business error function.
    Value: !GetAtt LambdaForSyncExecuteBusinessErrorFuntion.Arn
    Export:
      Name: mynavi-sample-lambda-errorhandling-sync-execute-business-error-function-arn

  LambdaForSyncExecuteSystemErrorFuntion:
    Description: Sync execute Lambda function for occuring system error function.
    Value: !Ref LambdaForSyncExecuteSystemErrorFuntion
    Export:
      Name: mynavi-sample-lambda-errorhandling-sync-execute-system-error-function-name

  LambdaForSyncExecuteSystemErrorFuntionArn:
    Description: Sync execute Lambda function for occuring system error function.
    Value: !GetAtt LambdaForSyncExecuteSystemErrorFuntion.Arn
    Export:
      Name: mynavi-sample-lambda-errorhandling-sync-execute-system-error-function-arn
  LambdaForAsyncExecuteBusinessErrorFuntion:
    Description: Async execute Lambda function for occuring business error function.
    Value: !Ref LambdaForAsyncExecuteBusinessErrorFuntion
    Export:
      Name: mynavi-sample-lambda-errorhandling-async-execute-business-error-function-name

  LambdaForAsyncExecuteBusinessErrorFuntionArn:
    Description: Async execute Lambda function for occuring business error function.
    Value: !GetAtt LambdaForAsyncExecuteBusinessErrorFuntion.Arn
    Export:
      Name: mynavi-sample-lambda-errorhandling-async-execute-business-error-function-arn

  LambdaForAsyncExecuteSystemErrorFuntion:
    Description: Async execute Lambda function for occuring system error function.
    Value: !Ref LambdaForAsyncExecuteSystemErrorFuntion
    Export:
      Name: mynavi-sample-lambda-errorhandling-async-execute-system-error-function-name

  LambdaForAsyncExecuteSystemErrorFuntionArn:
    Description: Async execute Lambda function for occuring system error function.
    Value: !GetAtt LambdaForAsyncExecuteSystemErrorFuntion.Arn
    Export:
      Name: mynavi-sample-lambda-errorhandling-async-execute-system-error-function-arn

  LambdaForNotifySystemErrorFuntion:
    Description: Lambda function for notifying system error function.
    Value: !Ref LambdaForNotifySystemErrorFuntion
    Export:
      Name: mynavi-sample-lambda-errorhandling-notify-system-error-function-name

  LambdaForNotifiySystemErrorFuntionArn:
    Description: Lambda function for notifying system error function.
    Value: !GetAtt LambdaForNotifySystemErrorFuntion.Arn
    Export:
      Name: mynavi-sample-lambda-errorhandling-notify-system-error-function-arn

